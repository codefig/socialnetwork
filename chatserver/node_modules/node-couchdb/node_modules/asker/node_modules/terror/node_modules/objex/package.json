{
  "name": "objex",
  "version": "0.2.5",
  "description": "Easy prototype and static methods inheritance via inheritedBy method",
  "main": "./lib/objex.js",
  "scripts": {
    "test": "./node_modules/.bin/jshint --config ./.jshintrc ./lib ./node_modules/.bin/jscs ./lib ./test && ./node_modules/.bin/nodeunit ./test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/nodules/objex.git"
  },
  "keywords": [
    "prototype",
    "object",
    "inheritance"
  ],
  "author": {
    "name": "Phillip Kovalev",
    "email": "twilightfeel@gmail.com",
    "url": "https://github.com/kaero"
  },
  "maintainers": [
    {
      "name": "Phillip Kovalev",
      "email": "twilightfeel@gmail.com",
      "url": "https://github.com/kaero"
    }
  ],
  "contributors": [
    {
      "name": "Alexey Rybakov",
      "email": "alexrybakov@yandex.ru",
      "url": "https://github.com/flackus"
    }
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/nodules/objex/master/LICENSE"
    }
  ],
  "devDependencies": {
    "nodeunit": "0.8.x",
    "jshint": "2.1.x",
    "jscs": ">=1.0.5"
  },
  "dependencies": {
    "extend": "1.1.3"
  },
  "readme": "# objex [![Build Status](https://secure.travis-ci.org/nodules/objex.png)](http://travis-ci.org/nodules/objex)\n\nBase constructor to ease prototype inheritance.\n\n[Skip to API](#api).\n\n### Simple example\n\n```javascript\nvar Objex = require('objex'),\n\n    Animal = Objex.create(function() {\n        Animal.__super.apply(this, arguments);\n        this.feet = 4;\n        this.hands = 0;\n        this.head = 1;\n    }),\n\n    Wolf = Animal.create(),\n\n    Dog = Wolf.create(),\n\n    Monkey = Animal.create(function() {\n        Monkey.__super.apply(this, arguments);\n\n        this.feet = 2;\n        this.hands = 2;\n    }),\n\n    wolf = new Wolf(),\n    dog = new Dog(),\n    monkey = new Monkey();\n\n// check inheritance\nconsole.log('wolf is instance of Wolf', wolf instanceof Wolf);\nconsole.log('wolf is instance of Animal', wolf instanceof Animal);\n\nconsole.log('monkey is instance of Monkey', monkey instanceof Monkey);\nconsole.log('monkey is instance of Animal', monkey instanceof Animal);\n\nconsole.log('dog is instance of Dog', dog instanceof Dog);\nconsole.log('dog is instance of Wolf', dog instanceof Wolf);\nconsole.log('dog is instance of Animal', dog instanceof Animal);\n```\n\n### Don't copy / partially copy static properties of super-class\n\n```javascript\nvar Animal = Objex.create(function() {\n        Animal.__super.apply(this, arguments);\n        Animal.count++;\n    }),\n    Sheep,\n    Wolf;\n    \nAnimal.count = 0;\n\nAnimal.kill = function() {\n    if (Animal.count > 0) {\n        Animal.count--;\n    }\n};\n    \n// pass `false` as first argument to prevent static fields bypass,\n// static method `create` will be copied anyway.\n// Assume, you want to count sheeps separately.\n// Animal.count will not be copied to Sheep.count, because it useless here.\n// Animal.kill will not be copied to Sheep too, aren't you want to shoot your own Sheep?\nSheep = Animal.create(false, function() {\n    Sheep.count++;\n});\n\nSheep.count = 0;\n\n// pass array of property names as first argument \n// to copy certain static properties only.\n// Static property `count` is useless for Wolf,\n// but you are still able to kill it, and decrease global Animal.count!\nWolf = Animal.create(['kill'], function() {\n    Wolf.__super.apply(this, arguments);\n    this.hungry = false;\n});\n```\n\n### Set base constructor which differs from the Object\n\nSuppose, you need to create Error inheritor, so your prototype chain must look like `ErrorEx > Error > Object`, not `ErrorEx > Object`.\n\n`Objex.wrap` at your service!\n\n```javascript\nvar MyOwnErrorEx;\n\nfunction ErrorEx() {\n    ErrorEx.__super.apply(this, arguments);\n    \n    this.extended = true;\n}\n\nutil.inherits(ErrorEx, Error);\nObjex.wrap(ErrorEx, Error);\n// now ErrorEx has `create` method and `__super` property\n\nMyOwnErrorEx = ErrorEx.create(function(code) {\n    this.code = code;\n    MyOwnErrorEx.__super.apply(this, Array.prototype.slice.call(arguments, 1));\n});\n```\n\n### Mixin\n\nMixin (copy) static and prototype properties from any constructor to the Objex successor, without prototype chain modification. Mixed properties will be own properties of a target object.\n\n```javascript\nvar Animal = Objex.create(),\n    Dog = Animal.create(),\n    TrickyPet = function() {}, // mixin ctor\n    LoudVoice = function() {}, // more one\n    jimmy = new Dog();\n\nAnimal.prototype.say = function(wat) {\n    console.log(wat);\n}\n\n// mixin method\nTrickyPet.prototype.jumpBackward = function() {\n    this.say('Woo-oo!');\n};\n\n// copy TrickyPet.prototype methods to Dog.prototype\nDog.mixin(TrickyPet);\n\n// call copied method from the instance of Dog\njimmy.jumpBackward();\n\n// mixin method\nLoudVoice.prototype.say = function(wat) {\n    console.log('(loud voice)', wat);\n};\n\n// override existing Dog prototype's method `say`\nDog.mixin({ override : true }, LoudVoice);\n\njimmy.jumpBackward();\n```\n\n## API\n\nDescription of the Objex and its successors static methods.\n\n### create([options], ctor)\n\nCreate successor of the callee with constructor passed as `ctor` argument. Argument `options` describes how the successor inherits statis fields:\n\n* `true` – default value; copy all static properties w/o existing properties overriding;\n* `false` – don't copy statis properties;\n* `{ include : [], exclude : [] }` – object with optional fields `include` and `exclude` which are arrays of properties' names to copy of not;\n* `Array of String` – shotcut syntax for `{ include : [] }`.\n\n### wrap(ctor)\n\nAdd Objex `create` and `mixin` static methods to the `ctor` which is not Objex successor without prototype chain modification.\n\n### mixin([options], ctor)\n\nMixin (copy) static and prototype methods of `ctor` to the callee contructor and its prototype if they doesn't exists.\n\nArgument `options` is mostly the same as of the `create` method, but the object argument can contain additional boolean property `override`. If it equals `true` existing methods of the callee will be overriden by mixin's methods.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/nodules/objex/issues"
  },
  "homepage": "https://github.com/nodules/objex",
  "_id": "objex@0.2.5",
  "dist": {
    "shasum": "f94ef66c54148a0073222f402f55655da40cbff5"
  },
  "_from": "objex@0.2.5",
  "_resolved": "https://registry.npmjs.org/objex/-/objex-0.2.5.tgz"
}
